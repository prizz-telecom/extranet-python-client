# coding: utf-8

"""
    Prizz-Telecom Extranet API

    Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvoiceDetail(BaseModel):
    """
    InvoiceDetail
    """ # noqa: E501
    available_workflows: Optional[List[StrictStr]] = Field(default=None, description="liste des processus disponible pour l'objet", alias="availableWorkflows")
    id: Optional[StrictInt] = None
    unit_price: Optional[StrictInt] = Field(default=None, alias="unitPrice")
    unit_price_str: Optional[StrictStr] = Field(default=None, alias="unitPriceStr")
    unit: Optional[StrictStr] = None
    vat: Optional[StrictStr] = None
    recurrence: Optional[StrictStr] = None
    quantity: Optional[StrictInt] = None
    unit_price_discount: Optional[StrictInt] = Field(default=None, alias="unitPriceDiscount")
    unit_price_discount_str: Optional[StrictStr] = Field(default=None, alias="unitPriceDiscountStr")
    name: Optional[StrictStr] = None
    house_number: Optional[StrictInt] = Field(default=None, alias="houseNumber")
    house_number_complement: Optional[StrictStr] = Field(default=None, alias="houseNumberComplement")
    street_name: Optional[StrictStr] = Field(default=None, alias="streetName")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    city_name: Optional[StrictStr] = Field(default=None, alias="cityName")
    insee_code: Optional[StrictStr] = Field(default=None, alias="inseeCode")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    x: Optional[Union[StrictFloat, StrictInt]] = None
    y: Optional[Union[StrictFloat, StrictInt]] = None
    projection: Optional[StrictStr] = None
    amount: Optional[StrictInt] = None
    invoice_id: Optional[StrictInt] = Field(default=None, alias="invoiceId")
    amount_str: Optional[StrictStr] = Field(default=None, alias="amountStr")
    va_trate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="VATrate")
    service_id: Optional[StrictInt] = Field(default=None, alias="serviceId")
    service_contract_id: Optional[StrictInt] = Field(default=None, alias="serviceContractId")
    description: Optional[StrictStr] = None
    from_date: Optional[datetime] = Field(default=None, alias="fromDate")
    to_date: Optional[datetime] = Field(default=None, alias="toDate")
    __properties: ClassVar[List[str]] = ["availableWorkflows", "id", "unitPrice", "unitPriceStr", "unit", "vat", "recurrence", "quantity", "unitPriceDiscount", "unitPriceDiscountStr", "name", "houseNumber", "houseNumberComplement", "streetName", "postalCode", "cityName", "inseeCode", "latitude", "longitude", "x", "y", "projection", "amount", "invoiceId", "amountStr", "VATrate", "serviceId", "serviceContractId", "description", "fromDate", "toDate"]

    @field_validator('available_workflows')
    def available_workflows_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\ChangeContact\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerCancel\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerChangeDate\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerConfirm\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\MigrateCoaxToL2Premium\\Context']):
                raise ValueError("each list item must be one of ('Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\ChangeContact\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerCancel\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerChangeDate\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerConfirm\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\MigrateCoaxToL2Premium\\Context')")
        return value

    @field_validator('recurrence')
    def recurrence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['monthly', 'yearly', 'half-yearly', 'quaterly']):
            raise ValueError("must be one of enum values ('monthly', 'yearly', 'half-yearly', 'quaterly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if vat (nullable) is None
        # and model_fields_set contains the field
        if self.vat is None and "vat" in self.model_fields_set:
            _dict['vat'] = None

        # set to None if recurrence (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence is None and "recurrence" in self.model_fields_set:
            _dict['recurrence'] = None

        # set to None if unit_price_discount (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price_discount is None and "unit_price_discount" in self.model_fields_set:
            _dict['unitPriceDiscount'] = None

        # set to None if house_number (nullable) is None
        # and model_fields_set contains the field
        if self.house_number is None and "house_number" in self.model_fields_set:
            _dict['houseNumber'] = None

        # set to None if house_number_complement (nullable) is None
        # and model_fields_set contains the field
        if self.house_number_complement is None and "house_number_complement" in self.model_fields_set:
            _dict['houseNumberComplement'] = None

        # set to None if street_name (nullable) is None
        # and model_fields_set contains the field
        if self.street_name is None and "street_name" in self.model_fields_set:
            _dict['streetName'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if city_name (nullable) is None
        # and model_fields_set contains the field
        if self.city_name is None and "city_name" in self.model_fields_set:
            _dict['cityName'] = None

        # set to None if insee_code (nullable) is None
        # and model_fields_set contains the field
        if self.insee_code is None and "insee_code" in self.model_fields_set:
            _dict['inseeCode'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if x (nullable) is None
        # and model_fields_set contains the field
        if self.x is None and "x" in self.model_fields_set:
            _dict['x'] = None

        # set to None if y (nullable) is None
        # and model_fields_set contains the field
        if self.y is None and "y" in self.model_fields_set:
            _dict['y'] = None

        # set to None if projection (nullable) is None
        # and model_fields_set contains the field
        if self.projection is None and "projection" in self.model_fields_set:
            _dict['projection'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if service_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_id is None and "service_id" in self.model_fields_set:
            _dict['serviceId'] = None

        # set to None if service_contract_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_contract_id is None and "service_contract_id" in self.model_fields_set:
            _dict['serviceContractId'] = None

        # set to None if from_date (nullable) is None
        # and model_fields_set contains the field
        if self.from_date is None and "from_date" in self.model_fields_set:
            _dict['fromDate'] = None

        # set to None if to_date (nullable) is None
        # and model_fields_set contains the field
        if self.to_date is None and "to_date" in self.model_fields_set:
            _dict['toDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableWorkflows": obj.get("availableWorkflows"),
            "id": obj.get("id"),
            "unitPrice": obj.get("unitPrice"),
            "unitPriceStr": obj.get("unitPriceStr"),
            "unit": obj.get("unit"),
            "vat": obj.get("vat"),
            "recurrence": obj.get("recurrence"),
            "quantity": obj.get("quantity"),
            "unitPriceDiscount": obj.get("unitPriceDiscount"),
            "unitPriceDiscountStr": obj.get("unitPriceDiscountStr"),
            "name": obj.get("name"),
            "houseNumber": obj.get("houseNumber"),
            "houseNumberComplement": obj.get("houseNumberComplement"),
            "streetName": obj.get("streetName"),
            "postalCode": obj.get("postalCode"),
            "cityName": obj.get("cityName"),
            "inseeCode": obj.get("inseeCode"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "x": obj.get("x"),
            "y": obj.get("y"),
            "projection": obj.get("projection"),
            "amount": obj.get("amount"),
            "invoiceId": obj.get("invoiceId"),
            "amountStr": obj.get("amountStr"),
            "VATrate": obj.get("VATrate"),
            "serviceId": obj.get("serviceId"),
            "serviceContractId": obj.get("serviceContractId"),
            "description": obj.get("description"),
            "fromDate": obj.get("fromDate"),
            "toDate": obj.get("toDate")
        })
        return _obj


