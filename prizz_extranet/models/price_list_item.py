# coding: utf-8

"""
    Prizz-Telecom Extranet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.product import Product
from typing import Optional, Set
from typing_extensions import Self

class PriceListItem(BaseModel):
    """
    PriceListItem
    """ # noqa: E501
    id: Optional[StrictInt] = None
    create_date: Optional[datetime] = Field(default=None, alias="createDate")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    name: Optional[StrictStr] = None
    unit_price: Optional[StrictInt] = Field(default=None, alias="unitPrice")
    unit_price_str: Optional[StrictStr] = Field(default=None, alias="unitPriceStr")
    unit: Optional[StrictStr] = None
    vat: Optional[StrictStr] = None
    recurrence: Optional[StrictStr] = None
    price_list_id: Optional[StrictInt] = Field(default=None, alias="priceListId")
    product: Optional[Product] = None
    commercial_code: Optional[StrictStr] = Field(default=None, alias="commercialCode")
    description: Optional[StrictStr] = None
    inside_offer_only: Optional[StrictBool] = Field(default=None, alias="insideOfferOnly")
    to_estimate: Optional[StrictBool] = Field(default=None, alias="toEstimate")
    active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "createDate", "lastModifiedDate", "name", "unitPrice", "unitPriceStr", "unit", "vat", "recurrence", "priceListId", "product", "commercialCode", "description", "insideOfferOnly", "toEstimate", "active"]

    @field_validator('recurrence')
    def recurrence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['monthly', 'yearly', 'half-yearly', 'quaterly']):
            raise ValueError("must be one of enum values ('monthly', 'yearly', 'half-yearly', 'quaterly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PriceListItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if vat (nullable) is None
        # and model_fields_set contains the field
        if self.vat is None and "vat" in self.model_fields_set:
            _dict['vat'] = None

        # set to None if recurrence (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence is None and "recurrence" in self.model_fields_set:
            _dict['recurrence'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PriceListItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createDate": obj.get("createDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "name": obj.get("name"),
            "unitPrice": obj.get("unitPrice"),
            "unitPriceStr": obj.get("unitPriceStr"),
            "unit": obj.get("unit"),
            "vat": obj.get("vat"),
            "recurrence": obj.get("recurrence"),
            "priceListId": obj.get("priceListId"),
            "product": Product.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "commercialCode": obj.get("commercialCode"),
            "description": obj.get("description"),
            "insideOfferOnly": obj.get("insideOfferOnly"),
            "toEstimate": obj.get("toEstimate"),
            "active": obj.get("active")
        })
        return _obj


