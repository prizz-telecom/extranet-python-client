# coding: utf-8

"""
    Prizz-Telecom Extranet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.client_legal_entity import ClientLegalEntity
from prizz_extranet.models.invoice_detail import InvoiceDetail
from prizz_extranet.models.legal_entity import LegalEntity
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Invoice
    """ # noqa: E501
    available_workflows: Optional[List[StrictStr]] = Field(default=None, description="liste des processus disponible pour l'objet", alias="availableWorkflows")
    id: Optional[StrictInt] = None
    create_date: Optional[datetime] = Field(default=None, alias="createDate")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    rc_total: Optional[Dict[str, StrictInt]] = Field(default=None, alias="rcTotal")
    rc_total_str: Optional[Dict[str, StrictStr]] = Field(default=None, alias="rcTotalStr")
    rc_vat_total: Optional[Dict[str, StrictInt]] = Field(default=None, alias="rcVATTotal")
    rc_vat_total_str: Optional[Dict[str, StrictStr]] = Field(default=None, alias="rcVATTotalStr")
    nrc_total: Optional[StrictInt] = Field(default=None, alias="nrcTotal")
    nrc_total_str: Optional[StrictStr] = Field(default=None, alias="nrcTotalStr")
    nrc_vat_total: Optional[StrictInt] = Field(default=None, alias="nrcVATTotal")
    nrc_vat_total_str: Optional[StrictStr] = Field(default=None, alias="nrcVATTotalStr")
    client_legal_entity: Optional[ClientLegalEntity] = Field(default=None, alias="clientLegalEntity")
    legal_entity: Optional[LegalEntity] = Field(default=None, alias="legalEntity")
    ref: Optional[StrictStr] = None
    month_period: Optional[StrictInt] = Field(default=None, alias="monthPeriod")
    year_period: Optional[StrictInt] = Field(default=None, alias="yearPeriod")
    total: Optional[StrictInt] = None
    total_str: Optional[StrictStr] = Field(default=None, alias="totalStr")
    total_vat: Optional[StrictInt] = Field(default=None, alias="totalVAT")
    total_vat_str: Optional[StrictStr] = Field(default=None, alias="totalVATStr")
    details: Optional[List[InvoiceDetail]] = None
    use_vat_reverse_charge: Optional[StrictBool] = Field(default=None, alias="useVATReverseCharge")
    due_date: Optional[datetime] = Field(default=None, alias="dueDate")
    submit_date: Optional[datetime] = Field(default=None, alias="submitDate")
    __properties: ClassVar[List[str]] = ["availableWorkflows", "id", "createDate", "lastModifiedDate", "rcTotal", "rcTotalStr", "rcVATTotal", "rcVATTotalStr", "nrcTotal", "nrcTotalStr", "nrcVATTotal", "nrcVATTotalStr", "clientLegalEntity", "legalEntity", "ref", "monthPeriod", "yearPeriod", "total", "totalStr", "totalVAT", "totalVATStr", "details", "useVATReverseCharge", "dueDate", "submitDate"]

    @field_validator('available_workflows')
    def available_workflows_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context']):
                raise ValueError("each list item must be one of ('Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_legal_entity
        if self.client_legal_entity:
            _dict['clientLegalEntity'] = self.client_legal_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of legal_entity
        if self.legal_entity:
            _dict['legalEntity'] = self.legal_entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in details (list)
        _items = []
        if self.details:
            for _item_details in self.details:
                if _item_details:
                    _items.append(_item_details.to_dict())
            _dict['details'] = _items
        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if nrc_total (nullable) is None
        # and model_fields_set contains the field
        if self.nrc_total is None and "nrc_total" in self.model_fields_set:
            _dict['nrcTotal'] = None

        # set to None if nrc_vat_total (nullable) is None
        # and model_fields_set contains the field
        if self.nrc_vat_total is None and "nrc_vat_total" in self.model_fields_set:
            _dict['nrcVATTotal'] = None

        # set to None if ref (nullable) is None
        # and model_fields_set contains the field
        if self.ref is None and "ref" in self.model_fields_set:
            _dict['ref'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if total_vat (nullable) is None
        # and model_fields_set contains the field
        if self.total_vat is None and "total_vat" in self.model_fields_set:
            _dict['totalVAT'] = None

        # set to None if due_date (nullable) is None
        # and model_fields_set contains the field
        if self.due_date is None and "due_date" in self.model_fields_set:
            _dict['dueDate'] = None

        # set to None if submit_date (nullable) is None
        # and model_fields_set contains the field
        if self.submit_date is None and "submit_date" in self.model_fields_set:
            _dict['submitDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableWorkflows": obj.get("availableWorkflows"),
            "id": obj.get("id"),
            "createDate": obj.get("createDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "rcTotal": obj.get("rcTotal"),
            "rcTotalStr": obj.get("rcTotalStr"),
            "rcVATTotal": obj.get("rcVATTotal"),
            "rcVATTotalStr": obj.get("rcVATTotalStr"),
            "nrcTotal": obj.get("nrcTotal"),
            "nrcTotalStr": obj.get("nrcTotalStr"),
            "nrcVATTotal": obj.get("nrcVATTotal"),
            "nrcVATTotalStr": obj.get("nrcVATTotalStr"),
            "clientLegalEntity": ClientLegalEntity.from_dict(obj["clientLegalEntity"]) if obj.get("clientLegalEntity") is not None else None,
            "legalEntity": LegalEntity.from_dict(obj["legalEntity"]) if obj.get("legalEntity") is not None else None,
            "ref": obj.get("ref"),
            "monthPeriod": obj.get("monthPeriod"),
            "yearPeriod": obj.get("yearPeriod"),
            "total": obj.get("total"),
            "totalStr": obj.get("totalStr"),
            "totalVAT": obj.get("totalVAT"),
            "totalVATStr": obj.get("totalVATStr"),
            "details": [InvoiceDetail.from_dict(_item) for _item in obj["details"]] if obj.get("details") is not None else None,
            "useVATReverseCharge": obj.get("useVATReverseCharge"),
            "dueDate": obj.get("dueDate"),
            "submitDate": obj.get("submitDate")
        })
        return _obj


