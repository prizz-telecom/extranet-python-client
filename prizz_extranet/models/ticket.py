# coding: utf-8

"""
    Prizz-Telecom Extranet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.running_process import RunningProcess
from typing import Optional, Set
from typing_extensions import Self

class Ticket(BaseModel):
    """
    Ticket
    """ # noqa: E501
    id: Optional[StrictStr] = None
    operator_id: Optional[StrictInt] = Field(default=None, alias="operatorId")
    operator_name: Optional[StrictStr] = Field(default=None, alias="operatorName")
    numero: Optional[StrictStr] = None
    etat: Optional[StrictStr] = None
    etat_lib: Optional[StrictStr] = None
    titre: Optional[StrictStr] = None
    cust_name: Optional[StrictStr] = None
    ref_commande: Optional[StrictStr] = None
    id_service_sicom: Optional[StrictInt] = None
    ref_service: Optional[StrictStr] = None
    cust_address: Optional[StrictStr] = None
    ref_tiers: Optional[StrictStr] = None
    date_creation: Optional[StrictStr] = None
    date_ouverture: Optional[StrictStr] = None
    date_resolution: Optional[StrictStr] = None
    date_cloture: Optional[StrictStr] = None
    last_message: Optional[StrictStr] = None
    running_process: Optional[List[RunningProcess]] = None
    __properties: ClassVar[List[str]] = ["id", "operatorId", "operatorName", "numero", "etat", "etat_lib", "titre", "cust_name", "ref_commande", "id_service_sicom", "ref_service", "cust_address", "ref_tiers", "date_creation", "date_ouverture", "date_resolution", "date_cloture", "last_message", "running_process"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Ticket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in running_process (list)
        _items = []
        if self.running_process:
            for _item_running_process in self.running_process:
                if _item_running_process:
                    _items.append(_item_running_process.to_dict())
            _dict['running_process'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if operator_id (nullable) is None
        # and model_fields_set contains the field
        if self.operator_id is None and "operator_id" in self.model_fields_set:
            _dict['operatorId'] = None

        # set to None if operator_name (nullable) is None
        # and model_fields_set contains the field
        if self.operator_name is None and "operator_name" in self.model_fields_set:
            _dict['operatorName'] = None

        # set to None if numero (nullable) is None
        # and model_fields_set contains the field
        if self.numero is None and "numero" in self.model_fields_set:
            _dict['numero'] = None

        # set to None if etat (nullable) is None
        # and model_fields_set contains the field
        if self.etat is None and "etat" in self.model_fields_set:
            _dict['etat'] = None

        # set to None if etat_lib (nullable) is None
        # and model_fields_set contains the field
        if self.etat_lib is None and "etat_lib" in self.model_fields_set:
            _dict['etat_lib'] = None

        # set to None if titre (nullable) is None
        # and model_fields_set contains the field
        if self.titre is None and "titre" in self.model_fields_set:
            _dict['titre'] = None

        # set to None if cust_name (nullable) is None
        # and model_fields_set contains the field
        if self.cust_name is None and "cust_name" in self.model_fields_set:
            _dict['cust_name'] = None

        # set to None if ref_commande (nullable) is None
        # and model_fields_set contains the field
        if self.ref_commande is None and "ref_commande" in self.model_fields_set:
            _dict['ref_commande'] = None

        # set to None if id_service_sicom (nullable) is None
        # and model_fields_set contains the field
        if self.id_service_sicom is None and "id_service_sicom" in self.model_fields_set:
            _dict['id_service_sicom'] = None

        # set to None if ref_service (nullable) is None
        # and model_fields_set contains the field
        if self.ref_service is None and "ref_service" in self.model_fields_set:
            _dict['ref_service'] = None

        # set to None if cust_address (nullable) is None
        # and model_fields_set contains the field
        if self.cust_address is None and "cust_address" in self.model_fields_set:
            _dict['cust_address'] = None

        # set to None if ref_tiers (nullable) is None
        # and model_fields_set contains the field
        if self.ref_tiers is None and "ref_tiers" in self.model_fields_set:
            _dict['ref_tiers'] = None

        # set to None if date_creation (nullable) is None
        # and model_fields_set contains the field
        if self.date_creation is None and "date_creation" in self.model_fields_set:
            _dict['date_creation'] = None

        # set to None if date_ouverture (nullable) is None
        # and model_fields_set contains the field
        if self.date_ouverture is None and "date_ouverture" in self.model_fields_set:
            _dict['date_ouverture'] = None

        # set to None if date_resolution (nullable) is None
        # and model_fields_set contains the field
        if self.date_resolution is None and "date_resolution" in self.model_fields_set:
            _dict['date_resolution'] = None

        # set to None if date_cloture (nullable) is None
        # and model_fields_set contains the field
        if self.date_cloture is None and "date_cloture" in self.model_fields_set:
            _dict['date_cloture'] = None

        # set to None if last_message (nullable) is None
        # and model_fields_set contains the field
        if self.last_message is None and "last_message" in self.model_fields_set:
            _dict['last_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Ticket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "operatorId": obj.get("operatorId"),
            "operatorName": obj.get("operatorName"),
            "numero": obj.get("numero"),
            "etat": obj.get("etat"),
            "etat_lib": obj.get("etat_lib"),
            "titre": obj.get("titre"),
            "cust_name": obj.get("cust_name"),
            "ref_commande": obj.get("ref_commande"),
            "id_service_sicom": obj.get("id_service_sicom"),
            "ref_service": obj.get("ref_service"),
            "cust_address": obj.get("cust_address"),
            "ref_tiers": obj.get("ref_tiers"),
            "date_creation": obj.get("date_creation"),
            "date_ouverture": obj.get("date_ouverture"),
            "date_resolution": obj.get("date_resolution"),
            "date_cloture": obj.get("date_cloture"),
            "last_message": obj.get("last_message"),
            "running_process": [RunningProcess.from_dict(_item) for _item in obj["running_process"]] if obj.get("running_process") is not None else None
        })
        return _obj


