# coding: utf-8

"""
    Prizz-Telecom Extranet API

    Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EligibilityResultCombination(BaseModel):
    """
    EligibilityResultCombination
    """ # noqa: E501
    combination_id: Optional[StrictStr] = Field(default=None, description="Combination id, a unique identifier for the combination", alias="combinationId")
    total: Optional[StrictInt] = Field(default=None, description="Total cost in €x100")
    total_without_nrc: Optional[StrictInt] = Field(default=None, description="Total recuring cost in €x100", alias="totalWithoutNrc")
    nrc: Optional[StrictInt] = Field(default=None, description="Total non recuring cost in €x100")
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="Attributes of the combination")
    nrc_to_estimate: Optional[StrictBool] = Field(default=None, description="If offer contains a NRC to estimate", alias="nrcToEstimate")
    __properties: ClassVar[List[str]] = ["combinationId", "total", "totalWithoutNrc", "nrc", "attributes", "nrcToEstimate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EligibilityResultCombination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if nrc (nullable) is None
        # and model_fields_set contains the field
        if self.nrc is None and "nrc" in self.model_fields_set:
            _dict['nrc'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EligibilityResultCombination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "combinationId": obj.get("combinationId"),
            "total": obj.get("total"),
            "totalWithoutNrc": obj.get("totalWithoutNrc"),
            "nrc": obj.get("nrc"),
            "attributes": obj.get("attributes"),
            "nrcToEstimate": obj.get("nrcToEstimate")
        })
        return _obj


