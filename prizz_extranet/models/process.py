# coding: utf-8

"""
    Prizz-Telecom Extranet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.process_action import ProcessAction
from prizz_extranet.models.process_attributes import ProcessAttributes
from prizz_extranet.models.ticket_attachment import TicketAttachment
from typing import Optional, Set
from typing_extensions import Self

class Process(BaseModel):
    """
    Process
    """ # noqa: E501
    context_id: Optional[StrictInt] = None
    entity_id: Optional[StrictInt] = None
    entity_class: Optional[StrictStr] = None
    process_class: Optional[StrictStr] = None
    start_date: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    state_lib: Optional[StrictStr] = None
    end_date: Optional[StrictStr] = None
    attrs: Optional[ProcessAttributes] = None
    lib: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    states: Optional[List[Any]] = None
    attachments: Optional[List[TicketAttachment]] = None
    actions: Optional[List[ProcessAction]] = None
    __properties: ClassVar[List[str]] = ["context_id", "entity_id", "entity_class", "process_class", "start_date", "state", "state_lib", "end_date", "attrs", "lib", "title", "states", "attachments", "actions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Process from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attrs
        if self.attrs:
            _dict['attrs'] = self.attrs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item_attachments in self.attachments:
                if _item_attachments:
                    _items.append(_item_attachments.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # set to None if context_id (nullable) is None
        # and model_fields_set contains the field
        if self.context_id is None and "context_id" in self.model_fields_set:
            _dict['context_id'] = None

        # set to None if entity_id (nullable) is None
        # and model_fields_set contains the field
        if self.entity_id is None and "entity_id" in self.model_fields_set:
            _dict['entity_id'] = None

        # set to None if entity_class (nullable) is None
        # and model_fields_set contains the field
        if self.entity_class is None and "entity_class" in self.model_fields_set:
            _dict['entity_class'] = None

        # set to None if process_class (nullable) is None
        # and model_fields_set contains the field
        if self.process_class is None and "process_class" in self.model_fields_set:
            _dict['process_class'] = None

        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict['start_date'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if state_lib (nullable) is None
        # and model_fields_set contains the field
        if self.state_lib is None and "state_lib" in self.model_fields_set:
            _dict['state_lib'] = None

        # set to None if end_date (nullable) is None
        # and model_fields_set contains the field
        if self.end_date is None and "end_date" in self.model_fields_set:
            _dict['end_date'] = None

        # set to None if lib (nullable) is None
        # and model_fields_set contains the field
        if self.lib is None and "lib" in self.model_fields_set:
            _dict['lib'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Process from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context_id": obj.get("context_id"),
            "entity_id": obj.get("entity_id"),
            "entity_class": obj.get("entity_class"),
            "process_class": obj.get("process_class"),
            "start_date": obj.get("start_date"),
            "state": obj.get("state"),
            "state_lib": obj.get("state_lib"),
            "end_date": obj.get("end_date"),
            "attrs": ProcessAttributes.from_dict(obj["attrs"]) if obj.get("attrs") is not None else None,
            "lib": obj.get("lib"),
            "title": obj.get("title"),
            "states": obj.get("states"),
            "attachments": [TicketAttachment.from_dict(_item) for _item in obj["attachments"]] if obj.get("attachments") is not None else None,
            "actions": [ProcessAction.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None
        })
        return _obj


