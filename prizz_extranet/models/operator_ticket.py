# coding: utf-8

"""
    Prizz-Telecom Extranet API

    Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.running_process import RunningProcess
from typing import Optional, Set
from typing_extensions import Self

class OperatorTicket(BaseModel):
    """
    OperatorTicket
    """ # noqa: E501
    numero: Optional[StrictStr] = None
    date_creation: Optional[StrictStr] = None
    date_cloture: Optional[StrictStr] = None
    date_debut_incident: Optional[StrictStr] = None
    date_resolution: Optional[StrictStr] = None
    date_gtr: Optional[StrictStr] = None
    etat: Optional[StrictStr] = None
    running_workflows: Optional[List[RunningProcess]] = None
    archived_workflows: Optional[List[RunningProcess]] = None
    __properties: ClassVar[List[str]] = ["numero", "date_creation", "date_cloture", "date_debut_incident", "date_resolution", "date_gtr", "etat", "running_workflows", "archived_workflows"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperatorTicket from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in running_workflows (list)
        _items = []
        if self.running_workflows:
            for _item_running_workflows in self.running_workflows:
                if _item_running_workflows:
                    _items.append(_item_running_workflows.to_dict())
            _dict['running_workflows'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in archived_workflows (list)
        _items = []
        if self.archived_workflows:
            for _item_archived_workflows in self.archived_workflows:
                if _item_archived_workflows:
                    _items.append(_item_archived_workflows.to_dict())
            _dict['archived_workflows'] = _items
        # set to None if numero (nullable) is None
        # and model_fields_set contains the field
        if self.numero is None and "numero" in self.model_fields_set:
            _dict['numero'] = None

        # set to None if date_creation (nullable) is None
        # and model_fields_set contains the field
        if self.date_creation is None and "date_creation" in self.model_fields_set:
            _dict['date_creation'] = None

        # set to None if date_cloture (nullable) is None
        # and model_fields_set contains the field
        if self.date_cloture is None and "date_cloture" in self.model_fields_set:
            _dict['date_cloture'] = None

        # set to None if date_debut_incident (nullable) is None
        # and model_fields_set contains the field
        if self.date_debut_incident is None and "date_debut_incident" in self.model_fields_set:
            _dict['date_debut_incident'] = None

        # set to None if date_resolution (nullable) is None
        # and model_fields_set contains the field
        if self.date_resolution is None and "date_resolution" in self.model_fields_set:
            _dict['date_resolution'] = None

        # set to None if date_gtr (nullable) is None
        # and model_fields_set contains the field
        if self.date_gtr is None and "date_gtr" in self.model_fields_set:
            _dict['date_gtr'] = None

        # set to None if etat (nullable) is None
        # and model_fields_set contains the field
        if self.etat is None and "etat" in self.model_fields_set:
            _dict['etat'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperatorTicket from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "numero": obj.get("numero"),
            "date_creation": obj.get("date_creation"),
            "date_cloture": obj.get("date_cloture"),
            "date_debut_incident": obj.get("date_debut_incident"),
            "date_resolution": obj.get("date_resolution"),
            "date_gtr": obj.get("date_gtr"),
            "etat": obj.get("etat"),
            "running_workflows": [RunningProcess.from_dict(_item) for _item in obj["running_workflows"]] if obj.get("running_workflows") is not None else None,
            "archived_workflows": [RunningProcess.from_dict(_item) for _item in obj["archived_workflows"]] if obj.get("archived_workflows") is not None else None
        })
        return _obj


