# coding: utf-8

"""
    Prizz-Telecom Extranet API

    Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ServiceContractNrc(BaseModel):
    """
    ServiceContractNrc
    """ # noqa: E501
    id: Optional[StrictInt] = None
    create_date: Optional[datetime] = Field(default=None, alias="createDate")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    name: Optional[StrictStr] = None
    unit_price: Optional[StrictInt] = Field(default=None, alias="unitPrice")
    unit_price_str: Optional[StrictStr] = Field(default=None, alias="unitPriceStr")
    unit: Optional[StrictStr] = None
    vat: Optional[StrictStr] = None
    recurrence: Optional[StrictStr] = None
    quantity: Optional[StrictInt] = None
    unit_price_discount: Optional[StrictInt] = Field(default=None, alias="unitPriceDiscount")
    unit_price_discount_str: Optional[StrictStr] = Field(default=None, alias="unitPriceDiscountStr")
    attributes: Optional[Dict[str, Any]] = None
    house_number: Optional[StrictInt] = Field(default=None, alias="houseNumber")
    house_number_complement: Optional[StrictStr] = Field(default=None, alias="houseNumberComplement")
    street_name: Optional[StrictStr] = Field(default=None, alias="streetName")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    city_name: Optional[StrictStr] = Field(default=None, alias="cityName")
    insee_code: Optional[StrictStr] = Field(default=None, alias="inseeCode")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    x: Optional[Union[StrictFloat, StrictInt]] = None
    y: Optional[Union[StrictFloat, StrictInt]] = None
    projection: Optional[StrictStr] = None
    service_contract_id: Optional[StrictInt] = Field(default=None, alias="serviceContractId")
    base_item_id: Optional[StrictInt] = Field(default=None, alias="baseItemId")
    billed: Optional[StrictBool] = None
    price: Optional[StrictInt] = None
    price_str: Optional[StrictStr] = Field(default=None, alias="priceStr")
    va_trate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="VATrate")
    commercial_code: Optional[StrictStr] = Field(default=None, alias="commercialCode")
    description: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "createDate", "lastModifiedDate", "name", "unitPrice", "unitPriceStr", "unit", "vat", "recurrence", "quantity", "unitPriceDiscount", "unitPriceDiscountStr", "attributes", "houseNumber", "houseNumberComplement", "streetName", "postalCode", "cityName", "inseeCode", "latitude", "longitude", "x", "y", "projection", "serviceContractId", "baseItemId", "billed", "price", "priceStr", "VATrate", "commercialCode", "description", "type"]

    @field_validator('recurrence')
    def recurrence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['monthly', 'yearly', 'half-yearly', 'quaterly']):
            raise ValueError("must be one of enum values ('monthly', 'yearly', 'half-yearly', 'quaterly')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceContractNrc from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if unit_price (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price is None and "unit_price" in self.model_fields_set:
            _dict['unitPrice'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if vat (nullable) is None
        # and model_fields_set contains the field
        if self.vat is None and "vat" in self.model_fields_set:
            _dict['vat'] = None

        # set to None if recurrence (nullable) is None
        # and model_fields_set contains the field
        if self.recurrence is None and "recurrence" in self.model_fields_set:
            _dict['recurrence'] = None

        # set to None if unit_price_discount (nullable) is None
        # and model_fields_set contains the field
        if self.unit_price_discount is None and "unit_price_discount" in self.model_fields_set:
            _dict['unitPriceDiscount'] = None

        # set to None if attributes (nullable) is None
        # and model_fields_set contains the field
        if self.attributes is None and "attributes" in self.model_fields_set:
            _dict['attributes'] = None

        # set to None if house_number (nullable) is None
        # and model_fields_set contains the field
        if self.house_number is None and "house_number" in self.model_fields_set:
            _dict['houseNumber'] = None

        # set to None if house_number_complement (nullable) is None
        # and model_fields_set contains the field
        if self.house_number_complement is None and "house_number_complement" in self.model_fields_set:
            _dict['houseNumberComplement'] = None

        # set to None if street_name (nullable) is None
        # and model_fields_set contains the field
        if self.street_name is None and "street_name" in self.model_fields_set:
            _dict['streetName'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if city_name (nullable) is None
        # and model_fields_set contains the field
        if self.city_name is None and "city_name" in self.model_fields_set:
            _dict['cityName'] = None

        # set to None if insee_code (nullable) is None
        # and model_fields_set contains the field
        if self.insee_code is None and "insee_code" in self.model_fields_set:
            _dict['inseeCode'] = None

        # set to None if latitude (nullable) is None
        # and model_fields_set contains the field
        if self.latitude is None and "latitude" in self.model_fields_set:
            _dict['latitude'] = None

        # set to None if longitude (nullable) is None
        # and model_fields_set contains the field
        if self.longitude is None and "longitude" in self.model_fields_set:
            _dict['longitude'] = None

        # set to None if x (nullable) is None
        # and model_fields_set contains the field
        if self.x is None and "x" in self.model_fields_set:
            _dict['x'] = None

        # set to None if y (nullable) is None
        # and model_fields_set contains the field
        if self.y is None and "y" in self.model_fields_set:
            _dict['y'] = None

        # set to None if projection (nullable) is None
        # and model_fields_set contains the field
        if self.projection is None and "projection" in self.model_fields_set:
            _dict['projection'] = None

        # set to None if base_item_id (nullable) is None
        # and model_fields_set contains the field
        if self.base_item_id is None and "base_item_id" in self.model_fields_set:
            _dict['baseItemId'] = None

        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if price_str (nullable) is None
        # and model_fields_set contains the field
        if self.price_str is None and "price_str" in self.model_fields_set:
            _dict['priceStr'] = None

        # set to None if va_trate (nullable) is None
        # and model_fields_set contains the field
        if self.va_trate is None and "va_trate" in self.model_fields_set:
            _dict['VATrate'] = None

        # set to None if commercial_code (nullable) is None
        # and model_fields_set contains the field
        if self.commercial_code is None and "commercial_code" in self.model_fields_set:
            _dict['commercialCode'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceContractNrc from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "createDate": obj.get("createDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "name": obj.get("name"),
            "unitPrice": obj.get("unitPrice"),
            "unitPriceStr": obj.get("unitPriceStr"),
            "unit": obj.get("unit"),
            "vat": obj.get("vat"),
            "recurrence": obj.get("recurrence"),
            "quantity": obj.get("quantity"),
            "unitPriceDiscount": obj.get("unitPriceDiscount"),
            "unitPriceDiscountStr": obj.get("unitPriceDiscountStr"),
            "attributes": obj.get("attributes"),
            "houseNumber": obj.get("houseNumber"),
            "houseNumberComplement": obj.get("houseNumberComplement"),
            "streetName": obj.get("streetName"),
            "postalCode": obj.get("postalCode"),
            "cityName": obj.get("cityName"),
            "inseeCode": obj.get("inseeCode"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "x": obj.get("x"),
            "y": obj.get("y"),
            "projection": obj.get("projection"),
            "serviceContractId": obj.get("serviceContractId"),
            "baseItemId": obj.get("baseItemId"),
            "billed": obj.get("billed"),
            "price": obj.get("price"),
            "priceStr": obj.get("priceStr"),
            "VATrate": obj.get("VATrate"),
            "commercialCode": obj.get("commercialCode"),
            "description": obj.get("description"),
            "type": obj.get("type")
        })
        return _obj


