# coding: utf-8

"""
    Prizz-Telecom Extranet API

    Prizz-Telecom Extranet API https://dev.prizz-telecom.fr/

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from prizz_extranet.models.client_legal_entity import ClientLegalEntity
from prizz_extranet.models.contact import Contact
from prizz_extranet.models.offer import Offer
from prizz_extranet.models.service import Service
from prizz_extranet.models.service_contract_commercial_offers_inner import ServiceContractCommercialOffersInner
from prizz_extranet.models.service_contract_nrc import ServiceContractNrc
from prizz_extranet.models.typed_contact import TypedContact
from typing import Optional, Set
from typing_extensions import Self

class ServiceContract(BaseModel):
    """
    ServiceContract
    """ # noqa: E501
    available_workflows: Optional[List[StrictStr]] = Field(default=None, description="liste des processus disponible pour l'objet", alias="availableWorkflows")
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    create_date: Optional[datetime] = Field(default=None, alias="createDate")
    last_modified_date: Optional[datetime] = Field(default=None, alias="lastModifiedDate")
    canceled_reason: Optional[StrictStr] = Field(default=None, alias="canceledReason")
    canceled_date: Optional[datetime] = Field(default=None, alias="canceledDate")
    status: Optional[StrictStr] = None
    legal_entity_id: Optional[StrictInt] = Field(default=None, alias="legalEntityId")
    client_contract_id: Optional[StrictInt] = Field(default=None, alias="clientContractId")
    subscription_date: Optional[datetime] = Field(default=None, alias="subscriptionDate")
    activation_date: Optional[datetime] = Field(default=None, alias="activationDate")
    first_activation_date: Optional[datetime] = Field(default=None, alias="firstActivationDate")
    offer: Optional[Offer] = None
    client: Optional[ClientLegalEntity] = None
    ref_client: Optional[StrictStr] = Field(default=None, description="ref set by customer", alias="refClient")
    ref_service: Optional[StrictStr] = Field(default=None, description="ref used by Prizz Telecom NOC", alias="refService")
    description: Optional[StrictStr] = None
    services: Optional[List[Service]] = None
    nrcs: Optional[List[ServiceContractNrc]] = None
    planned_activation_date: Optional[datetime] = Field(default=None, alias="plannedActivationDate")
    sold_activation_date: Optional[datetime] = Field(default=None, alias="soldActivationDate")
    commitment_end_date: Optional[datetime] = Field(default=None, alias="commitmentEndDate")
    attributes: Optional[Dict[str, Any]] = None
    consolidated_attributes: Optional[Dict[str, Any]] = Field(default=None, alias="consolidatedAttributes")
    consolidated_attributes_staging_or_new: Optional[Dict[str, Any]] = Field(default=None, alias="consolidatedAttributesStagingOrNew")
    commercial_offers: Optional[List[ServiceContractCommercialOffersInner]] = Field(default=None, alias="commercialOffers")
    contacts: Optional[List[Contact]] = None
    configured_contacts: Optional[List[TypedContact]] = Field(default=None, alias="configuredContacts")
    replaces: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["availableWorkflows", "id", "name", "createDate", "lastModifiedDate", "canceledReason", "canceledDate", "status", "legalEntityId", "clientContractId", "subscriptionDate", "activationDate", "firstActivationDate", "offer", "client", "refClient", "refService", "description", "services", "nrcs", "plannedActivationDate", "soldActivationDate", "commitmentEndDate", "attributes", "consolidatedAttributes", "consolidatedAttributesStagingOrNew", "commercialOffers", "contacts", "configuredContacts", "replaces"]

    @field_validator('available_workflows')
    def available_workflows_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\ChangeContact\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerCancel\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerChangeDate\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerConfirm\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\MigrateCoaxToL2Premium\\Context']):
                raise ValueError("each list item must be one of ('Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context', 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context', 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context', 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context', 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context', 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context', 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\ChangeContact\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerCancel\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerChangeDate\\Context', 'Infracorp\\Services\\Workflow\\Appointment\\CustomerConfirm\\Context', 'Infracorp\\Services\\Workflow\\ServiceContract\\MigrateCoaxToL2Premium\\Context')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['new', 'staging', 'active', 'ending', 'terminated']):
            raise ValueError("must be one of enum values ('new', 'staging', 'active', 'ending', 'terminated')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceContract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of offer
        if self.offer:
            _dict['offer'] = self.offer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client:
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nrcs (list)
        _items = []
        if self.nrcs:
            for _item_nrcs in self.nrcs:
                if _item_nrcs:
                    _items.append(_item_nrcs.to_dict())
            _dict['nrcs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in commercial_offers (list)
        _items = []
        if self.commercial_offers:
            for _item_commercial_offers in self.commercial_offers:
                if _item_commercial_offers:
                    _items.append(_item_commercial_offers.to_dict())
            _dict['commercialOffers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contacts (list)
        _items = []
        if self.contacts:
            for _item_contacts in self.contacts:
                if _item_contacts:
                    _items.append(_item_contacts.to_dict())
            _dict['contacts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in configured_contacts (list)
        _items = []
        if self.configured_contacts:
            for _item_configured_contacts in self.configured_contacts:
                if _item_configured_contacts:
                    _items.append(_item_configured_contacts.to_dict())
            _dict['configuredContacts'] = _items
        # set to None if last_modified_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_date is None and "last_modified_date" in self.model_fields_set:
            _dict['lastModifiedDate'] = None

        # set to None if canceled_reason (nullable) is None
        # and model_fields_set contains the field
        if self.canceled_reason is None and "canceled_reason" in self.model_fields_set:
            _dict['canceledReason'] = None

        # set to None if canceled_date (nullable) is None
        # and model_fields_set contains the field
        if self.canceled_date is None and "canceled_date" in self.model_fields_set:
            _dict['canceledDate'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.activation_date is None and "activation_date" in self.model_fields_set:
            _dict['activationDate'] = None

        # set to None if first_activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.first_activation_date is None and "first_activation_date" in self.model_fields_set:
            _dict['firstActivationDate'] = None

        # set to None if ref_client (nullable) is None
        # and model_fields_set contains the field
        if self.ref_client is None and "ref_client" in self.model_fields_set:
            _dict['refClient'] = None

        # set to None if ref_service (nullable) is None
        # and model_fields_set contains the field
        if self.ref_service is None and "ref_service" in self.model_fields_set:
            _dict['refService'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if planned_activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.planned_activation_date is None and "planned_activation_date" in self.model_fields_set:
            _dict['plannedActivationDate'] = None

        # set to None if sold_activation_date (nullable) is None
        # and model_fields_set contains the field
        if self.sold_activation_date is None and "sold_activation_date" in self.model_fields_set:
            _dict['soldActivationDate'] = None

        # set to None if commitment_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.commitment_end_date is None and "commitment_end_date" in self.model_fields_set:
            _dict['commitmentEndDate'] = None

        # set to None if replaces (nullable) is None
        # and model_fields_set contains the field
        if self.replaces is None and "replaces" in self.model_fields_set:
            _dict['replaces'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceContract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "availableWorkflows": obj.get("availableWorkflows"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "createDate": obj.get("createDate"),
            "lastModifiedDate": obj.get("lastModifiedDate"),
            "canceledReason": obj.get("canceledReason"),
            "canceledDate": obj.get("canceledDate"),
            "status": obj.get("status"),
            "legalEntityId": obj.get("legalEntityId"),
            "clientContractId": obj.get("clientContractId"),
            "subscriptionDate": obj.get("subscriptionDate"),
            "activationDate": obj.get("activationDate"),
            "firstActivationDate": obj.get("firstActivationDate"),
            "offer": Offer.from_dict(obj["offer"]) if obj.get("offer") is not None else None,
            "client": ClientLegalEntity.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "refClient": obj.get("refClient"),
            "refService": obj.get("refService"),
            "description": obj.get("description"),
            "services": [Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "nrcs": [ServiceContractNrc.from_dict(_item) for _item in obj["nrcs"]] if obj.get("nrcs") is not None else None,
            "plannedActivationDate": obj.get("plannedActivationDate"),
            "soldActivationDate": obj.get("soldActivationDate"),
            "commitmentEndDate": obj.get("commitmentEndDate"),
            "attributes": obj.get("attributes"),
            "consolidatedAttributes": obj.get("consolidatedAttributes"),
            "consolidatedAttributesStagingOrNew": obj.get("consolidatedAttributesStagingOrNew"),
            "commercialOffers": [ServiceContractCommercialOffersInner.from_dict(_item) for _item in obj["commercialOffers"]] if obj.get("commercialOffers") is not None else None,
            "contacts": [Contact.from_dict(_item) for _item in obj["contacts"]] if obj.get("contacts") is not None else None,
            "configuredContacts": [TypedContact.from_dict(_item) for _item in obj["configuredContacts"]] if obj.get("configuredContacts") is not None else None,
            "replaces": obj.get("replaces")
        })
        return _obj


