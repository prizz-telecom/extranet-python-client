# coding: utf-8

"""
    Prizz-Telecom Extranet API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from prizz_extranet.models.comment_tree import CommentTree

class TestCommentTree(unittest.TestCase):
    """CommentTree unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommentTree:
        """Test CommentTree
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommentTree`
        """
        model = CommentTree()
        if include_optional:
            return CommentTree(
                comment = prizz_extranet.models.comment.Comment(
                    id = 56, 
                    create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    owner = '', 
                    content = '', 
                    content_type = '', ),
                children = [
                    prizz_extranet.models.comment_tree.CommentTree(
                        comment = prizz_extranet.models.comment.Comment(
                            id = 56, 
                            create_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            last_modified_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            owner = '', 
                            content = '', 
                            content_type = '', ), )
                    ]
            )
        else:
            return CommentTree(
        )
        """

    def testCommentTree(self):
        """Test CommentTree"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
